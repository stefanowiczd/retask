// Code generated by MockGen. DO NOT EDIT.
// Source: ./service_interface.go
//
// Generated by this command:
//
//	mockgen -destination=./mock/service_mock.go -package=mock -source=./service_interface.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServicePacksManger is a mock of ServicePacksManger interface.
type MockServicePacksManger struct {
	ctrl     *gomock.Controller
	recorder *MockServicePacksMangerMockRecorder
	isgomock struct{}
}

// MockServicePacksMangerMockRecorder is the mock recorder for MockServicePacksManger.
type MockServicePacksMangerMockRecorder struct {
	mock *MockServicePacksManger
}

// NewMockServicePacksManger creates a new mock instance.
func NewMockServicePacksManger(ctrl *gomock.Controller) *MockServicePacksManger {
	mock := &MockServicePacksManger{ctrl: ctrl}
	mock.recorder = &MockServicePacksMangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePacksManger) EXPECT() *MockServicePacksMangerMockRecorder {
	return m.recorder
}

// CalculateOptimumPacksAmount mocks base method.
func (m *MockServicePacksManger) CalculateOptimumPacksAmount(ctx context.Context, smallPackSize, mediumPackSize, largePackSize int) (int, int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateOptimumPacksAmount", ctx, smallPackSize, mediumPackSize, largePackSize)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CalculateOptimumPacksAmount indicates an expected call of CalculateOptimumPacksAmount.
func (mr *MockServicePacksMangerMockRecorder) CalculateOptimumPacksAmount(ctx, smallPackSize, mediumPackSize, largePackSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateOptimumPacksAmount", reflect.TypeOf((*MockServicePacksManger)(nil).CalculateOptimumPacksAmount), ctx, smallPackSize, mediumPackSize, largePackSize)
}
