// Code generated by MockGen. DO NOT EDIT.
// Source: ./service_interface.go
//
// Generated by this command:
//
//	mockgen -destination=./mock/service_mock.go -package=mock -source=./service_interface.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServicePackageManger is a mock of ServicePackageManger interface.
type MockServicePackageManger struct {
	ctrl     *gomock.Controller
	recorder *MockServicePackageMangerMockRecorder
	isgomock struct{}
}

// MockServicePackageMangerMockRecorder is the mock recorder for MockServicePackageManger.
type MockServicePackageMangerMockRecorder struct {
	mock *MockServicePackageManger
}

// NewMockServicePackageManger creates a new mock instance.
func NewMockServicePackageManger(ctrl *gomock.Controller) *MockServicePackageManger {
	mock := &MockServicePackageManger{ctrl: ctrl}
	mock.recorder = &MockServicePackageMangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePackageManger) EXPECT() *MockServicePackageMangerMockRecorder {
	return m.recorder
}

// CalculateOptimumPackagesNumber mocks base method.
func (m *MockServicePackageManger) CalculateOptimumPackagesNumber(smallPackageSize, mediumPackageSize, largePackageSize int) (int, int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateOptimumPackagesNumber", smallPackageSize, mediumPackageSize, largePackageSize)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CalculateOptimumPackagesNumber indicates an expected call of CalculateOptimumPackagesNumber.
func (mr *MockServicePackageMangerMockRecorder) CalculateOptimumPackagesNumber(smallPackageSize, mediumPackageSize, largePackageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateOptimumPackagesNumber", reflect.TypeOf((*MockServicePackageManger)(nil).CalculateOptimumPackagesNumber), smallPackageSize, mediumPackageSize, largePackageSize)
}
